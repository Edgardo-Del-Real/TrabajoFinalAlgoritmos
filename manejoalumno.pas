UNIT MANEJOALUMNO;

{$CODEPAGE UTF8}

INTERFACE

    USES
        CRT, ARCHIVOALUM, UNITARBOL, SYSUTILS, VALIDACIONES;


  CONST
      DISCAPACIDADES: ARRAY[1..5] OF STRING =
          ('PROBLEMAS DEL HABLA Y LENGUAJE',
           'DIFICULTAD PARA ESCRIBIR',
           'DIFICULTADES DE APRENDIZAJE VISUAL',
           'MEMORIA Y OTRAS DIFICULTADES DEL PENSAMIENTO',
           'DESTREZAS SOCIALES INADECUADAS');


PROCEDURE CARGARDATOSALUMNO (VAR X:T_DATO_ALUMNOS; CLAVE:STRING; VAR ARCHIVOALUMNO:T_ARCHIVO_ALUMNOS);
PROCEDURE PASAR_DATOS (VAR ARCH: T_ARCHIVO_ALUMNOS; VAR RAIZLEGAJO,RAIZAPYNOM:T_PUNT_ARBOL);
PROCEDURE CARGARALUMNO(VAR ARCHIVOALUMNO:T_ARCHIVO_ALUMNOS; VAR FINARCH:CARDINAL; X:T_DATO_ALUMNOS);
PROCEDURE DARALTAALUMNO (VAR ARCHIVOALUMNO:T_ARCHIVO_ALUMNOS; VAR X:T_DATO_ALUMNOS; CLAVE:STRING);
PROCEDURE MUESTRADATOSALUMNO(X:T_DATO_ALUMNOS);
PROCEDURE MUESTRA_REGISTRO_POR_TABLA (VAR X: T_DATO_ALUMNOS);
PROCEDURE MOSTRARALUMNO (VAR ARCH:T_ARCHIVO_ALUMNOS ; POS:INTEGER);
PROCEDURE BAJAALUMNO(VAR ARCHIVOALUMNO: T_ARCHIVO_ALUMNOS; POS: INTEGER);
PROCEDURE MODIFICARALUMNO(VAR ARCHIVOALUMNO: T_ARCHIVO_ALUMNOS; POS:INTEGER);
PROCEDURE MOSTRAR_NOMBRE_ALUMNO (VAR ARCHIVOALUMNO:T_ARCHIVO_ALUMNOS; POS:INTEGER);
FUNCTION MOSTRARSINO(CONDICION: BOOLEAN):STRING;
FUNCTION MOSTRARESTADO(CONDICION: BOOLEAN):STRING;

IMPLEMENTATION

PROCEDURE PASAR_DATOS (VAR ARCH: T_ARCHIVO_ALUMNOS; VAR RAIZLEGAJO,RAIZAPYNOM:T_PUNT_ARBOL);
VAR
  X:T_DATO_ALUMNOS;
  I:BYTE;
  R1,R:T_DATO_ARBOL;
BEGIN
  I:=0;
  IF FILESIZE (ARCH) >= 1 THEN
  BEGIN
       WHILE NOT EOF(ARCH) DO
       BEGIN
         SEEK (ARCH, I);
         READ (ARCH, X);
         R.CLAVE:=X.NUM_LEGAJO;
         R.POSARCH:= I;
         AGREGAR_ARBOL (RAIZLEGAJO,R);
         R1.CLAVE:=X.APYNOM;
         R1.POSARCH:= I;
         AGREGAR_ARBOL (RAIZAPYNOM,R1);
         I:= I + 1;
       END;
  END;
END;

PROCEDURE CARGARDATOSALUMNO (VAR X:T_DATO_ALUMNOS; CLAVE:STRING; VAR ARCHIVOALUMNO:T_ARCHIVO_ALUMNOS);
VAR
    DISC:STRING;
    I:BYTE;
    FECHA,CONFIRMACION:STRING;
    POS:INTEGER;
    Y:T_DATO_ALUMNOS;
    EXISTE:BOOLEAN;
  BEGIN
      CONFIRMACION:='N';
      REPEAT
      CLRSCR;
      WITH X DO
      BEGIN
          TEXTCOLOR(WHITE);
          GOTOXY(52,5);
          WRITELN('** ALTA ALUMNO **');
          TEXTCOLOR(GREEN);
          GOTOXY(15,7);
          WRITE('NUMERO DE LEGAJO: ');
          TEXTCOLOR(WHITE);
          WRITE(CLAVE);
          NUM_LEGAJO := CLAVE;

          REPEAT
              IF NOT ESNUMERO(NUM_LEGAJO) THEN
              BEGIN
                  CLRSCR;
                  TEXTCOLOR(GREEN);
                  GOTOXY(45, 4);
                  WRITE('HUBO UN ERROR. INGRESE NUEVAMENTE SU NUMERO DE LEGAJO: ');
                  TEXTCOLOR(WHITE);
                  READLN(NUM_LEGAJO);
              END;
          UNTIL ESNUMERO(NUM_LEGAJO);

          REPEAT
              RESET(ARCHIVOALUMNO);
              EXISTE := FALSE;

              WHILE NOT EOF(ARCHIVOALUMNO) DO
              BEGIN
                  READ(ARCHIVOALUMNO, Y);
                  IF NUM_LEGAJO = Y.NUM_LEGAJO THEN
                      EXISTE := TRUE;
              END;

              IF EXISTE THEN
              BEGIN
                  CLRSCR;
                  GOTOXY(45, 4);
                  WRITE('LEGAJO YA EXISTENTE. INGRESE UN NUEVO LEGAJO: ');
                  TEXTCOLOR(WHITE);
                  READLN(NUM_LEGAJO);
              END;
          UNTIL NOT EXISTE;
        TEXTCOLOR(GREEN);
        GOTOXY(15,9);
        WRITE('INGRESE NOMBRE Y APELLIDO: ');
        TEXTCOLOR(WHITE);
        READLN(APYNOM);
        APYNOM := UPCASE(APYNOM);

        WHILE NOT ESCADENA(APYNOM) OR (APYNOM = '') DO
        BEGIN
            TEXTCOLOR(RED);
            GOTOXY(15,11);
            WRITE('NOMBRE INGRESADO INVALIDO');
            DELAY(1500);
            GOTOXY(15,11);
            CLREOL;
            GOTOXY(42,9);
            CLREOL;
            TEXTCOLOR(WHITE);
            READLN(APYNOM);
            APYNOM := UPCASE(APYNOM);
        END;

        REPEAT
        TEXTCOLOR(LIGHTRED);
        GOTOXY(15,12);
        WRITELN('FECHA DE NACIMIENTO ');
        TEXTCOLOR(LIGHTRED);
        GOTOXY(15,13);
        WRITELN('FORMATO: DD/MM/AAAA');
        TEXTCOLOR(GREEN);
        GOTOXY(15,15);
        WRITE('INGRESE DIA: ');
        TEXTCOLOR(WHITE);
        READLN(FECHA_NAC.DIA);
          WHILE NOT(VALIDARFECHADIAMES(FECHA_NAC.DIA)) DO
          BEGIN
          GOTOXY(15,17);
          TEXTCOLOR(RED);
          WRITELN('DIA INVALIDO, INGRESE NUEVAMENTE');
          DELAY(600);
          GOTOXY(15,17);
          CLREOL;
          TEXTCOLOR(GREEN);
          GOTOXY(15,15);
          WRITE('INGRESE DIA: ');
          TEXTCOLOR(WHITE);
          GOTOXY(28,15);
          CLREOL;
          READLN(FECHA_NAC.DIA);
          END;

        TEXTCOLOR(GREEN);
        GOTOXY(15,17);
        WRITE('INGRESE MES: ');
        TEXTCOLOR(WHITE);
        READLN(FECHA_NAC.MES);
         WHILE NOT(VALIDARFECHADIAMES(FECHA_NAC.MES)) DO
          BEGIN
            GOTOXY(15,19);
            TEXTCOLOR(RED);
            WRITELN('MES INVALIDO, INGRESE NUEVAMENTE');
            DELAY(600);
            GOTOXY(15,19);
            CLREOL;
            TEXTCOLOR(GREEN);
            GOTOXY(15,17);
            WRITE('INGRESE MES: ');
            TEXTCOLOR(WHITE);
            GOTOXY(28,17);
            CLREOL;
            READLN(FECHA_NAC.MES);
          END;

        TEXTCOLOR(GREEN);
        GOTOXY(15,19);
        WRITE('INGRESE AÑO: ');
        TEXTCOLOR(WHITE);
        READLN(FECHA_NAC.ANIO);

          WHILE NOT(VALIDARFECHAANIO(FECHA_NAC.ANIO)) DO
          BEGIN
            GOTOXY(15,21);
            TEXTCOLOR(RED);
            WRITELN('AÑO INVALIDO, INGRESE NUEVAMENTE');
            DELAY(600);
            GOTOXY(15,21);
            CLREOL;
            TEXTCOLOR(GREEN);
            GOTOXY(15,19);
            WRITE('INGRESE AÑO: ');
            TEXTCOLOR(WHITE);
            GOTOXY(28,19);
            CLREOL;
            READLN(FECHA_NAC.ANIO);
          END;

        FECHA:=(X.FECHA_NAC.DIA) + ' / ' + (X.FECHA_NAC.MES) + ' / ' + (X.FECHA_NAC.ANIO);

       IF NOT ESFECHAVALIDA(FECHA) THEN
     BEGIN
       TEXTCOLOR(RED);
       GOTOXY(30,23);
       WRITELN('FECHA INVALIDA. VUELVA A INGRESAR CORRECTAMENTE LOS DATOS');
       DELAY(2000);
       GOTOXY(30,23);
       CLREOL;
       GOTOXY(28,15);
       CLREOL;
       GOTOXY(15,17);
       CLREOL;
       GOTOXY(15,19);
       CLREOL;

     END;
    UNTIL ESFECHAVALIDA(FECHA);


        FOR I := 1 TO 5 DO
        BEGIN
              GOTOXY(65,12);
              TEXTCOLOR(LIGHTRED);
              WRITELN('  DISCAPACIDADES');
              GOTOXY(60,13);
              TEXTCOLOR(LIGHTRED);
              WRITELN('"T" LA TIENE | "F" NO LA TIENE');
              GOTOXY(55,14 + I );
              TEXTCOLOR(GREEN);
              WRITE(DISCAPACIDADES[I], ': ');
              TEXTCOLOR(WHITE);
              READLN(DISC);

              WHILE (UPCASE(DISC) <> 'T') AND (UPCASE(DISC) <> 'F') DO
              BEGIN
                  GOTOXY(55,17 + I );
                  CLREOL;
                  TEXTCOLOR(RED);
                  WRITE('ENTRADA INVALIDA. SOLO "T" O "F"');
                    DELAY(1000);
                    GOTOXY(55,17+I);
                    CLREOL;
                    GOTOXY(55,14 + I);
                    TEXTCOLOR(GREEN);
                    WRITE(DISCAPACIDADES[I], ': ');
                    GOTOXY(57 + LENGTH(DISCAPACIDADES[I]),14 + I);
                    CLREOL;
                    TEXTCOLOR(WHITE);
                    READLN(DISC);
              END;

              IF UPCASE(DISC) = 'T' THEN
                  DISCAPACIDAD[I] := TRUE
              ELSE
                  DISCAPACIDAD[I] := FALSE;
        END;

       REPEAT
                TEXTCOLOR(YELLOW);
                GOTOXY(32,23);
                WRITE('¿QUIERE CONFIRMAR LOS DATOS DE ', X.APYNOM ,'? (S/N): ');
                TEXTCOLOR(WHITE);
                READLN(CONFIRMACION);
                CONFIRMACION := UPCASE(CONFIRMACION);
                IF (LENGTH(CONFIRMACION) <> 1) OR ((CONFIRMACION <> 'S') AND (CONFIRMACION <> 'N')) THEN
                BEGIN
                    GOTOXY(55,18);
                    CLREOL;
                    TEXTCOLOR(RED);
                    WRITE('ENTRADA INVALIDA. SOLO "S" O "N": ');
                    TEXTCOLOR(WHITE);
                END;
            UNTIL (CONFIRMACION = 'S') OR (CONFIRMACION = 'N');
      END;
      UNTIL CONFIRMACION = 'S';

         X.ESTADO := TRUE;
      END;


PROCEDURE CARGARALUMNO(VAR ARCHIVOALUMNO:T_ARCHIVO_ALUMNOS; VAR FINARCH:CARDINAL; X:T_DATO_ALUMNOS);
BEGIN
SEEK(ARCHIVOALUMNO, FINARCH);
WRITE(ARCHIVOALUMNO,X);
END;

PROCEDURE DARALTAALUMNO (VAR ARCHIVOALUMNO:T_ARCHIVO_ALUMNOS; VAR X:T_DATO_ALUMNOS; CLAVE:STRING);
VAR
    FINARCH:CARDINAL;
BEGIN
    CARGARDATOSALUMNO(X,CLAVE,ARCHIVOALUMNO);
    FINARCH:= FILESIZE(ARCHIVOALUMNO);
    CARGARALUMNO(ARCHIVOALUMNO, FINARCH, X);
END;

 PROCEDURE MUESTRADATOSALUMNO(X:T_DATO_ALUMNOS);
VAR
    I:BYTE;
    ESTADOSTR: STRING;
    DISC1, DISC2, DISC3, DISC4, DISC5: STRING;
BEGIN
  WITH X DO
    BEGIN
      CLRSCR;
      GOTOXY(10,5);
      TEXTCOLOR(YELLOW);
      WRITELN('DATOS ACTUALES DEL ALUMNO');
      GOTOXY(10,7);
      TEXTCOLOR (GREEN);
      WRITE('NUMERO DE LEGAJO: ');
      TEXTCOLOR(WHITE);
      WRITE(NUM_LEGAJO);
      GOTOXY(10,9);
      TEXTCOLOR (GREEN);
      WRITE('NOMBRE Y APELLIDO: ');
      TEXTCOLOR(WHITE);
      WRITE(APYNOM);
      GOTOXY(10,11);
      TEXTCOLOR (GREEN);
      WRITE('FECHA DE NACIMIENTO: ');
      TEXTCOLOR(WHITE);
      WRITE(FECHA_NAC.DIA,'/',FECHA_NAC.MES,'/',FECHA_NAC.ANIO);
      GOTOXY(10,13);
      TEXTCOLOR (GREEN);
      WRITE('ESTADO: ');
      TEXTCOLOR(WHITE);
      ESTADOSTR := MOSTRARESTADO(ESTADO);
      WRITE(ESTADOSTR); WRITELN;
      GOTOXY(10,15);
      TEXTCOLOR(GREEN);
      WRITELN('DISCAPACIDAD/ES:');
      TEXTCOLOR(WHITE);
      GOTOXY(10,17);
      WRITE('PROBLEMAS DEL HABLA Y LENGUAJE: ');
      TEXTCOLOR(GREEN);
      DISC1 := MOSTRARSINO(DISCAPACIDAD[1]);
      WRITE(DISC1); WRITELN;
      TEXTCOLOR(WHITE);
      GOTOXY(10,19);
      WRITE('DIFICULTAD PARA ESCRIBIR: ');
      TEXTCOLOR(GREEN);
      DISC2 := MOSTRARSINO(DISCAPACIDAD[2]);
      WRITE(DISC2); WRITELN;
      TEXTCOLOR(WHITE);
      GOTOXY(10,21);
      WRITE('DIFICULTADES DE APRENDIZAJE VISUAL: ');
      TEXTCOLOR(GREEN);
      DISC3 := MOSTRARSINO(DISCAPACIDAD[3]);
      WRITE(DISC3); WRITELN;
      TEXTCOLOR(WHITE);
      GOTOXY(10,23);
      WRITE('MEMORIA Y OTRAS DIFICULTADES DEL PENSAMIENTO: ');
      TEXTCOLOR(GREEN);
      DISC4 := MOSTRARSINO(DISCAPACIDAD[4]);
      WRITE(DISC4); WRITELN;
      TEXTCOLOR(WHITE);
      GOTOXY(10,25);
      WRITE('DESTREZAS SOCIALES INADECUADAS: ');
      TEXTCOLOR(GREEN);
      DISC5 := MOSTRARSINO(DISCAPACIDAD[5]);
      WRITE(DISC5); WRITELN;
      TEXTCOLOR(WHITE);
    END;
END;

FUNCTION MOSTRARESTADO(CONDICION: BOOLEAN):STRING;
BEGIN
  IF CONDICION THEN
   MOSTRARESTADO :=  'ACTIVO'
  ELSE
     MOSTRARESTADO :=  'INACTIVO';
END;


FUNCTION MOSTRARSINO(CONDICION: BOOLEAN):STRING;
BEGIN
  IF CONDICION THEN
    MOSTRARSINO :=  'SI'
  ELSE
    MOSTRARSINO :=  'NO';
END;


PROCEDURE MOSTRARALUMNO (VAR ARCH:T_ARCHIVO_ALUMNOS ; POS:INTEGER);
VAR
  X:T_DATO_ALUMNOS;
  BEGIN
RESET(ARCH);
SEEK(ARCH, POS);
READ(ARCH, X);
MUESTRADATOSALUMNO(X);
{GOTOXY(70,15);
TEXTCOLOR(YELLOW);
WRITE('OPRIMA <<ENTER>> PARA CONTINUAR ');
READKEY; }
END;

PROCEDURE BAJAALUMNO(VAR ARCHIVOALUMNO: T_ARCHIVO_ALUMNOS; POS: INTEGER);
VAR
  BUSCADO: STRING;
  X: T_DATO_ALUMNOS;
  OP: CHAR;
BEGIN
    SEEK(ARCHIVOALUMNO, POS);
    READ(ARCHIVOALUMNO, X);

    IF NOT X.ESTADO THEN
      BEGIN
       TEXTCOLOR(RED);
       GOTOXY(72,21);
       WRITE('ALUMNO ACTUALMENTE DADO DE BAJA');
       DELAY(3000);
      END
    ELSE
      BEGIN
        TEXTCOLOR(GREEN);
        GOTOXY(55,25);
        WRITE('¿SEGURO QUE QUIERE DAR DE BAJA A ' );
        TEXTCOLOR(YELLOW);
        WRITE( X.APYNOM );
        TEXTCOLOR(GREEN);
        WRITE(' ? S/N');

        REPEAT
          TEXTCOLOR(GREEN);
          GOTOXY(55,27);
          WRITE('RESPUESTA: ');
          TEXTCOLOR(WHITE);
          READLN(OP);
            GOTOXY(55,25);
        WRITE('                                                                                ' );
          GOTOXY(55,27);
          WRITE('                                                                        ');
          OP := UPCASE(OP);
          IF (OP <> 'S') AND (OP <> 'N') THEN
            BEGIN
              GOTOXY(60,23);
              TEXTCOLOR(RED);
              WRITELN('** INGRESE UNA OPCIÓN VÁLIDA: S O N **');
              TEXTCOLOR(WHITE);
              DELAY(2000);
              GOTOXY(55,23);
              CLREOL;
              GOTOXY(55,21);
              CLREOL;
            END;
        UNTIL (OP = 'S') OR (OP = 'N');

        IF OP = 'S' THEN
          BEGIN
            PANTALLACARGA2;
            X.ESTADO := FALSE;
            SEEK(ARCHIVOALUMNO, POS);
            WRITE(ARCHIVOALUMNO, X);
            CLRSCR;
          END;
      END;
END;

PROCEDURE MODIFICARALUMNO(VAR ARCHIVOALUMNO: T_ARCHIVO_ALUMNOS; POS:INTEGER);
VAR
  BUSCADO,FECHA_AUX: STRING;
  X: T_DATO_ALUMNOS;
  OPCION: STRING;
  I: BYTE;
  ARB: T_DATO_ARBOL;
  DISC:CHAR;
BEGIN

    SEEK(ARCHIVOALUMNO, POS);
    READ(ARCHIVOALUMNO, X);

    IF NOT X.ESTADO THEN
      BEGIN
       TEXTCOLOR(RED);
       GOTOXY(57,21);
       WRITE('ESTE ALUMNO ESTÁ DADO DE BAJA, NO PUEDE MODIFICARSE');
       DELAY(3000);
      END
    ELSE
    BEGIN
    CLRSCR;
    REPEAT
    MUESTRADATOSALUMNO(X);
    TEXTCOLOR(RED);
    GOTOXY(80,10);
    WRITELN('QUE CAMPO DESEA MODIFICAR?');
    TEXTCOLOR(GREEN);
    GOTOXY(75,12);
    WRITE('1- ');
    TEXTCOLOR(WHITE);
    WRITELN('NOMBRE Y APELLIDO');
    TEXTCOLOR(GREEN);
    GOTOXY(75,14);
    WRITE('2- ');
    TEXTCOLOR(WHITE);
    WRITELN('FECHA DE NACIMIENTO');
    TEXTCOLOR(GREEN);
        GOTOXY(75,16);
    WRITE('0- ');
    TEXTCOLOR(WHITE);
    WRITELN('VOLVER A MENU ALUMNO');

    REPEAT
    TEXTCOLOR(GREEN);
    GOTOXY(75,18);
    WRITE('RESPUESTA: ');
    TEXTCOLOR(WHITE);
    READLN(OPCION);

     IF NOT ESNUMERO(OPCION) OR (OPCION = '') THEN
      BEGIN
        TEXTCOLOR(RED);
        GOTOXY(75,22);
        WRITELN('ERROR: INGRESE UN NUMERO ENTRE 0 Y 3.');
        DELAY(1500);
        GOTOXY(75,22);
        CLREOL;
        GOTOXY(84,18);
        CLREOL;
      END
      ELSE
      BEGIN
        IF (OPCION < '0') OR (OPCION > '2') THEN
        BEGIN
          TEXTCOLOR(RED);
          GOTOXY(77,22);
          WRITELN('ERROR: OPCION FUERA DE RANGO.');
          DELAY(2000);
          GOTOXY(77,22);
          CLREOL;
          GOTOXY(86,18);
          CLREOL;
        END;
      END;
    UNTIL (ESNUMERO(OPCION)) AND (OPCION >= '0') AND (OPCION <= '2') AND (OPCION <> '');



    CASE OPCION OF
      '1':
        BEGIN
          CLRSCR;
          TEXTCOLOR(GREEN);
          GOTOXY(45,10);
          WRITE('INGRESE NUEVO NOMBRE Y APELLIDO: ');
          TEXTCOLOR(WHITE);
          READLN(X.APYNOM);
        WHILE NOT ESCADENA(X.APYNOM) DO
        BEGIN
            CLRSCR;
            TEXTCOLOR(RED);
            GOTOXY(45,14);
            WRITELN('NOMBRE INGRESADO INVALIDO. POR FAVOR REVISE COHERENCIA DE SUS DATOS');
            TEXTCOLOR(GREEN);
            GOTOXY(45,16);
            WRITE('INGRESE NOMBRE Y APELLIDO: ');
            TEXTCOLOR(WHITE);
            READLN(X.APYNOM);
        END;
        END;
      '2':
        BEGIN
        REPEAT
          CLRSCR;
          TEXTCOLOR(RED);
          GOTOXY(45,10);
          WRITELN('INGRESE FECHA DE NACIMIENTO. EJ: 08/09/2001');
          TEXTCOLOR(GREEN);
          GOTOXY(45,12);
          WRITE('INGRESE DIA: ');
          TEXTCOLOR(WHITE);
          READLN(X.FECHA_NAC.DIA);

             WHILE NOT(VALIDARFECHADIAMES(X.FECHA_NAC.DIA)) DO
          BEGIN
         GOTOXY(45,24);
          TEXTCOLOR(RED);
          WRITELN('DIA INVALIDO, POR FAVOR VERIFIQUE E INGRESE NUEVAMENTE');
          TEXTCOLOR(GREEN);
          GOTOXY(45,12);
          WRITE('INGRESE DIA: ');
          TEXTCOLOR(WHITE);
          READLN(X.FECHA_NAC.DIA);
          GOTOXY(45,24);
          WRITELN('                                                                                             ');
          END;

          TEXTCOLOR(GREEN);
          GOTOXY(45,14);
          WRITE('INGRESE MES: ');
          TEXTCOLOR(WHITE);
          READLN(X.FECHA_NAC.MES);

             WHILE NOT VALIDARFECHADIAMES(X.FECHA_NAC.MES) DO
          BEGIN
         GOTOXY(45,24);
          TEXTCOLOR(RED);
          WRITELN('MES INVALIDO, POR FAVOR VERIFIQUE E INGRESE NUEVAMENTE');
          TEXTCOLOR(GREEN);
          GOTOXY(45,14);
          WRITE('INGRESE MES: ');
          TEXTCOLOR(WHITE);
          READLN(X.FECHA_NAC.MES);
          GOTOXY(45,24);
          WRITELN('                                                                                             ');
          END;

          TEXTCOLOR(GREEN);
          GOTOXY(45,16);
          WRITE('INGRESE AÑO: ');
          TEXTCOLOR(WHITE);
          READLN(X.FECHA_NAC.ANIO);
           WHILE NOT VALIDARFECHAANIO(X.FECHA_NAC.ANIO) DO
          BEGIN
         GOTOXY(45,24);
          TEXTCOLOR(RED);
          WRITELN('AÑO INVALIDO, POR FAVOR VERIFIQUE E INGRESE NUEVAMENTE');
          TEXTCOLOR(GREEN);
          GOTOXY(45,16);
          WRITE('INGRESE AÑO: ');
          TEXTCOLOR(WHITE);
          READLN(X.FECHA_NAC.ANIO);
          GOTOXY(45,24);
          WRITELN('                                                                                             ');
          END;

           FECHA_AUX:= X.FECHA_NAC.DIA + '/' + X.FECHA_NAC.MES + '/' + X.FECHA_NAC.ANIO;
           IF NOT ESFECHAVALIDA(FECHA_AUX) THEN
     BEGIN
       CLRSCR;
       TEXTCOLOR(RED);
       GOTOXY(30,15);
       WRITELN('FECHA INVALIDA. VUELVA A INGRESAR CORRECTAMENTE LOS DATOS');
       TEXTCOLOR(WHITE);
       GOTOXY(43,17);
       WRITELN('OPRIMA <<ENTER>> PARA RECARGAR');
       READKEY;
       CLRSCR;
     END;
    UNTIL ESFECHAVALIDA(FECHA_AUX);


        END;
    END;
    UNTIL OPCION = '0';

    SEEK(ARCHIVOALUMNO, POS);
    WRITE(ARCHIVOALUMNO, X);
    PANTALLACARGA2;
    CLRSCR;
  END;

END;


PROCEDURE MUESTRA_REGISTRO_POR_TABLA (VAR X: T_DATO_ALUMNOS);
VAR
  FECHA, ESTADOSTR, DISC1, DISC2, DISC3, DISC4, DISC5: STRING;
BEGIN
  FECHA := (X.FECHA_NAC.DIA) + ' / ' + (X.FECHA_NAC.MES) + ' / ' + (X.FECHA_NAC.ANIO);
  ESTADOSTR := MOSTRARESTADO(X.ESTADO);
  DISC1 := MOSTRARSINO(X.DISCAPACIDAD[1]);
  DISC2 := MOSTRARSINO(X.DISCAPACIDAD[2]);
  DISC3 := MOSTRARSINO(X.DISCAPACIDAD[3]);
  DISC4 := MOSTRARSINO(X.DISCAPACIDAD[4]);
  DISC5 := MOSTRARSINO(X.DISCAPACIDAD[5]);

  WITH X DO
  BEGIN
    WRITE(NUM_LEGAJO:10, APYNOM:28, FECHA:20, ESTADOSTR:10, DISC1:12, DISC2:10, DISC3:10, DISC4:10, DISC5:10);
    WRITELN;
  END;
END;

PROCEDURE MOSTRAR_NOMBRE_ALUMNO (VAR ARCHIVOALUMNO:T_ARCHIVO_ALUMNOS; POS:INTEGER);
VAR
  X: T_DATO_ALUMNOS;
  LONGITUD: INTEGER;
  LINEA: STRING;
BEGIN
  RESET(ARCHIVOALUMNO);
  SEEK(ARCHIVOALUMNO, POS);
  READ(ARCHIVOALUMNO, X);

  LONGITUD := LENGTH(X.APYNOM) + 15;
  LINEA := STRINGOFCHAR('-', LONGITUD);

  GOTOXY(50, 23);
  TEXTCOLOR(LIGHTGRAY);
  WRITE(LINEA);
  TEXTCOLOR(GREEN);
  GOTOXY(53, 24);
  WRITE('ALUMNO: ');
  TEXTCOLOR(LIGHTGRAY);
  WRITE(X.APYNOM);
  GOTOXY(50, 25);
  TEXTCOLOR(LIGHTGRAY);
  WRITE(LINEA);
END;

END.