UNIT UNIT_ARBOL;

INTERFACE

USES CRT;

TYPE
T_DATO_ARBOL = RECORD
CLAVE:STRING[100];
POSARCH:WORD;
END;

T_PUNT_ARBOL = ^T_NODO;

T_NODO = RECORD
INFO:T_DATO_ARBOL;
SAI,SAD: T_PUNT_ARBOL;
END;

PROCEDURE CREAR_ARBOL (VAR RAIZ:T_PUNT_ARBOL);
PROCEDURE AGREGAR_ARBOL (VAR RAIZ:T_PUNT_ARBOL; var X:T_DATO_ARBOL);
FUNCTION ARBOL_VACIO (RAIZ:T_PUNT_ARBOL): BOOLEAN;
FUNCTION ARBOL_LLENO (RAIZ:T_PUNT_ARBOL): BOOLEAN;
PROCEDURE SUPRIME (VAR RAIZ:T_PUNT_ARBOL;X:T_DATO_ARBOL);
PROCEDURE INORDEN(VAR RAIZ:T_PUNT_ARBOL);
FUNCTION PREORDEN(RAIZ:T_PUNT_ARBOL;BUSCADO:STRING):INTEGER;

IMPLEMENTATION

PROCEDURE CREAR_ARBOL (VAR RAIZ:T_PUNT_ARBOL);
BEGIN
RAIZ:= NIL;
END;

PROCEDURE AGREGAR_ARBOL (VAR RAIZ:T_PUNT_ARBOL; var X:T_DATO_ARBOL);
BEGIN
IF RAIZ = NIL THEN
BEGIN
NEW (RAIZ);
RAIZ^.INFO:= X;
RAIZ^.SAI:= NIL;
RAIZ^.SAD:= NIL;
END
ELSE
IF RAIZ^.INFO.CLAVE > X.CLAVE THEN AGREGAR_ARBOL (RAIZ^.SAI,X)
else
  AGREGAR_ARBOL (RAIZ^.SAD,X);
END;
FUNCTION ARBOL_VACIO (RAIZ:T_PUNT_ARBOL): BOOLEAN;
BEGIN
ARBOL_VACIO:= RAIZ = NIL;
END;
FUNCTION ARBOL_LLENO (RAIZ:T_PUNT_ARBOL): BOOLEAN;
BEGIN
ARBOL_LLENO:= GETHEAPSTATUS.TOTALFREE < SIZEOF (T_NODO);
END;
FUNCTION SUPRIME_MIN (VAR RAIZ:T_PUNT_ARBOL): T_DATO_ARBOL;
BEGIN
IF RAIZ^.SAI = NIL THEN
 BEGIN
 SUPRIME_MIN:= RAIZ^.INFO;
 RAIZ:=RAIZ^.SAD
 END
 ELSE
 SUPRIME_MIN:= SUPRIME_MIN (RAIZ^.SAI)
END;
 PROCEDURE SUPRIME (VAR RAIZ:T_PUNT_ARBOL; X:T_DATO_ARBOL);
 BEGIN
 IF RAIZ <> NIL THEN
 IF X.CLAVE < RAIZ^.INFO.CLAVE THEN
 SUPRIME (RAIZ^.SAI,X)
 ELSE
 IF X.CLAVE < RAIZ^.INFO.CLAVE THEN
 SUPRIME (RAIZ^.SAD,X)
 ELSE
 IF (RAIZ^.SAI = NIL) AND (RAIZ^.SAD = NIL) THEN
 RAIZ:= NIL
 ELSE
 IF (RAIZ^.SAI = NIL) THEN
 RAIZ:= RAIZ^.SAD
 ELSE
 IF (RAIZ^.SAD = NIL) THEN
 RAIZ:= RAIZ^.SAI
 ELSE
 RAIZ^.INFO:= SUPRIME_MIN (RAIZ^.SAD)
 END;
 
 FUNCTION PREORDEN(RAIZ:T_PUNT_ARBOL;BUSCADO:STRING):INTEGER;
 BEGIN
 IF (RAIZ = NIL) THEN PREORDEN := -1
 ELSE
     IF ( RAIZ^.INFO.CLAVE = BUSCADO) THEN
 PREORDEN:= RAIZ^.INFO.POSARCH
 ELSE IF (RAIZ^.INFO.CLAVE) > BUSCADO THEN
 PREORDEN := PREORDEN(RAIZ^.SAI,BUSCADO)
 ELSE
 PREORDEN := PREORDEN(RAIZ^.SAD,BUSCADO)
 END;

  PROCEDURE INORDEN(VAR RAIZ:T_PUNT_ARBOL);
  BEGIN
  IF RAIZ <> NIL THEN BEGIN
  INORDEN (RAIZ^.SAI);
  WRITELN (RAIZ^.INFO.CLAVE);
  INORDEN (RAIZ^.SAD);
  END;
  END;
  FUNCTION BUSCAR_POSICION(RAIZ: T_PUNT_ARBOL; CLAVE: STRING): WORD;
BEGIN
  IF RAIZ = NIL THEN
    RESULT := 0
  ELSE IF RAIZ^.INFO.CLAVE = CLAVE THEN
    RESULT := RAIZ^.INFO.POSARCH
  ELSE IF CLAVE < RAIZ^.INFO.CLAVE THEN
    RESULT := BUSCAR_POSICION(RAIZ^.SAI, CLAVE)
  ELSE
    RESULT := BUSCAR_POSICION(RAIZ^.SAD, CLAVE);
END;

END.